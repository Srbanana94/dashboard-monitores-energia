import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import json

# --- Configura√ß√µes do Google Sheets ---
# Nome da sua planilha no Google Sheets
SPREADSHEET_NAME = "YOUR_SPREADSHEET_NAME"
# Nome da aba (abaixo da planilha, geralmente 'Sheet1' ou 'P√°gina1')
WORKSHEET_NAME = "YOUR_WORKSHEET_NAME"

# Carregar credenciais do Streamlit Secrets
# O nome 'gcp_service_account_key' deve ser o mesmo que voc√™ usou no Streamlit Secrets
# O conte√∫do do JSON √© lido como uma string e convertido para dicion√°rio
creds_json = st.secrets["gcp_service_account_key"]

# Autentica√ß√£o com Google Sheets
@st.cache_resource(ttl=3600) # Cache para evitar autenticar a cada recarregamento
def get_google_sheet_client():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope )
    client = gspread.authorize(creds)
    return client

client = get_google_sheet_client()

# --- Fun√ß√µes para interagir com a planilha ---
@st.cache_data(ttl=60) # Cache para os dados da planilha (atualiza a cada 60 segundos)
def load_data_from_gsheets():
    try:
        spreadsheet = client.open(SPREADSHEET_NAME)
        worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
        data = worksheet.get_all_records()
        df = pd.DataFrame(data)
        st.success(f"‚úÖ Dados carregados com sucesso do Google Sheets! {len(df)} registros encontrados.")
        return df
    except gspread.exceptions.SpreadsheetNotFound:
        st.error(f"‚ùå Planilha '{SPREADSHEET_NAME}' n√£o encontrada. Verifique o nome e as permiss√µes.")
        return pd.DataFrame()
    except gspread.exceptions.WorksheetNotFound:
        st.error(f"‚ùå Aba '{WORKSHEET_NAME}' n√£o encontrada na planilha '{SPREADSHEET_NAME}'. Verifique o nome.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dados do Google Sheets: {e}")
        return pd.DataFrame()

def update_data_to_gsheets(df_updated):
    try:
        spreadsheet = client.open(SPREADSHEET_NAME)
        worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
        # Limpa a planilha e escreve os dados atualizados
        worksheet.clear()
        worksheet.update([df_updated.columns.values.tolist()] + df_updated.values.tolist())
        st.success("‚úÖ Dados atualizados com sucesso no Google Sheets!")
    except Exception as e:
        st.error(f"‚ùå Erro ao atualizar dados no Google Sheets: {e}")

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(
    page_title="Dashboard - Monitores de Energia",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("‚ö° Dashboard - Acompanhamento de Monitores de Energia")
st.markdown("---")

# Carregar dados
df = load_data_from_gsheets()

if not df.empty:
    # Garantir que as colunas essenciais existam
    required_cols = [
        'Cidade', 'Respons√°vel T√©cnico', 'Local de Vistoria (POP)',
        'Monitor de Energia (Sim/N√£o)', 'Tipo de Monitor', 'Liga√ß√£o do Monitor',
        'Observa√ß√µes', 'Link para Evid√™ncias (Fotos)'
    ]
    for col in required_cols:
        if col not in df.columns:
            st.warning(f"A coluna '{col}' n√£o foi encontrada na planilha. Por favor, verifique o cabe√ßalho da sua planilha no Google Sheets.")
            st.stop()

    # Sidebar com filtros
    st.sidebar.header("üîç Filtros")
    
    cidades = ['Todas'] + sorted(df['Cidade'].unique().tolist())
    cidade_selecionada = st.sidebar.selectbox("Selecione a Cidade:", cidades)
    
    tecnicos = ['Todos'] + sorted(df['Respons√°vel T√©cnico'].unique().tolist())
    tecnico_selecionado = st.sidebar.selectbox("Selecione o T√©cnico:", tecnicos)
    
    df_filtrado = df.copy()
    if cidade_selecionada != 'Todas':
        df_filtrado = df_filtrado[df_filtrado['Cidade'] == cidade_selecionada]
    if tecnico_selecionado != 'Todos':
        df_filtrado = df_filtrado[df_filtrado['Respons√°vel T√©cnico'] == tecnico_selecionado]
    
    # --- M√©tricas principais ---
    col1, col2, col3, col4 = st.columns(4)
    
    total_pops = len(df_filtrado)
    com_monitor = len(df_filtrado[df_filtrado['Monitor de Energia (Sim/N√£o)'] == 'Sim'])
    sem_monitor = len(df_filtrado[df_filtrado['Monitor de Energia (Sim/N√£o)'] == 'N√£o'])
    percentual_com_monitor = (com_monitor / total_pops * 100) if total_pops > 0 else 0
    
    with col1:
        st.metric("Total de POPs", total_pops)
    with col2:
        st.metric("Com Monitor", com_monitor)
    with col3:
        st.metric("Sem Monitor", sem_monitor)
    with col4:
        st.metric("% Com Monitor", f"{percentual_com_monitor:.1f}%")
    
    st.markdown("---")
    
    # --- Gr√°ficos ---
    col_charts1, col_charts2 = st.columns(2)
    
    with col_charts1:
        st.subheader("üìä Distribui√ß√£o por Cidade")
        cidade_counts = df_filtrado.groupby(['Cidade', 'Monitor de Energia (Sim/N√£o)']).size().unstack(fill_value=0)
        fig_cidade = px.bar(
            cidade_counts, 
            title="Monitores por Cidade",
            color_discrete_map={'Sim': '#2E8B57', 'N√£o': '#DC143C'}
        )
        fig_cidade.update_layout(height=400)
        st.plotly_chart(fig_cidade, use_container_width=True)
    
    with col_charts2:
        st.subheader("üîß Distribui√ß√£o por T√©cnico")
        tecnico_counts = df_filtrado.groupby(['Respons√°vel T√©cnico', 'Monitor de Energia (Sim/N√£o)']).size().unstack(fill_value=0)
        fig_tecnico = px.bar(
            tecnico_counts, 
            title="Monitores por T√©cnico",
            color_discrete_map={'Sim': '#2E8B57', 'N√£o': '#DC143C'}
        )
        fig_tecnico.update_layout(height=400)
        st.plotly_chart(fig_tecnico, use_container_width=True)
    
    col_charts3, col_charts4 = st.columns(2)
    
    with col_charts3:
        st.subheader("ü•ß Status Geral dos Monitores")
        status_counts = df_filtrado['Monitor de Energia (Sim/N√£o)'].value_counts()
        fig_pizza = px.pie(
            values=status_counts.values, 
            names=status_counts.index,
            title="Distribui√ß√£o Geral",
            color_discrete_map={'Sim': '#2E8B57', 'N√£o': '#DC143C'}
        )
        fig_pizza.update_layout(height=400)
        st.plotly_chart(fig_pizza, use_container_width=True)
    
    with col_charts4:
        st.subheader("üìà Progresso por T√©cnico")
        progresso_tecnico = df_filtrado.groupby('Respons√°vel T√©cnico').agg({
            'Monitor de Energia (Sim/N√£o)': ['count', lambda x: (x == 'Sim').sum()]
        }).round(2)
        progresso_tecnico.columns = ['Total', 'Com Monitor']
        progresso_tecnico['% Completo'] = (progresso_tecnico['Com Monitor'] / progresso_tecnico['Total'] * 100).round(1)
        
        fig_progresso = px.bar(
            x=progresso_tecnico.index,
            y=progresso_tecnico['% Completo'],
            title="Percentual de POPs com Monitor por T√©cnico",
            color=progresso_tecnico['% Completo'],
            color_continuous_scale='RdYlGn'
        )
        fig_progresso.update_layout(height=400)
        st.plotly_chart(fig_progresso, use_container_width=True)
    
    st.markdown("---")
    
    # --- Tabela detalhada e Edi√ß√£o ---
    st.subheader("üìã Dados Detalhados e Edi√ß√£o")
    
    # Op√ß√£o para mostrar apenas POPs sem monitor
    mostrar_apenas_sem_monitor = st.checkbox("Mostrar apenas POPs sem monitor")
    
    if mostrar_apenas_sem_monitor:
        df_tabela = df_filtrado[df_filtrado['Monitor de Energia (Sim/N√£o)'] == 'N√£o']
    else:
        df_tabela = df_filtrado
    
    # Tabela edit√°vel
    st.markdown("**Clique duas vezes em uma c√©lula para editar.**")
    edited_df = st.data_editor(
        df_tabela,
        num_rows="dynamic",
        use_container_width=True,
        height=400,
        column_config={
            "Monitor de Energia (Sim/N√£o)": st.column_config.SelectboxColumn(
                "Monitor de Energia (Sim/N√£o)",
                options=["Sim", "N√£o"],
                required=True,
            ),
            "Link para Evid√™ncias (Fotos)": st.column_config.LinkColumn(
                "Link para Evid√™ncias (Fotos)",
                help="Link para a pasta de fotos no Google Drive ou similar",
                max_chars=100,
                display_text="üîó Link",
            )
        }
    )

    if st.button("Salvar Altera√ß√µes na Planilha"): # Bot√£o para salvar as altera√ß√µes
        # Mesclar as altera√ß√µes de volta ao DataFrame original
        # Isso √© um pouco complexo pois o st.data_editor retorna um novo DF
        # A forma mais robusta seria ter um ID √∫nico para cada linha
        # Por simplicidade, vamos sobrescrever a planilha inteira com o DF editado
        # Se voc√™ tiver um ID √∫nico, podemos refinar isso.
        
        # Primeiro, garantir que as linhas editadas sejam refletidas no df original
        # Isso √© uma simplifica√ß√£o. Em um cen√°rio real, voc√™ precisaria de um ID √∫nico
        # para cada linha para fazer um merge preciso.
        
        # Para esta demonstra√ß√£o, vamos assumir que a edi√ß√£o √© feita sobre o df_filtrado
        # e depois aplicamos essas mudan√ßas ao df original.
        
        # Crie uma c√≥pia do DataFrame original para n√£o modificar diretamente
        df_final = df.copy()
        
        # Atualize as linhas que foram editadas
        # A forma mais simples para este exemplo √© substituir o df original pelo editado
        # assumindo que o usu√°rio s√≥ edita as linhas vis√≠veis e que n√£o h√° adi√ß√£o/remo√ß√£o complexa
        
        # Para uma solu√ß√£o mais robusta, voc√™ precisaria de um identificador √∫nico para cada linha
        # e ent√£o fazer um merge ou update baseado nesse ID.
        
        # Por enquanto, vamos re-carregar os dados e aplicar as edi√ß√µes
        # Isso √© uma simplifica√ß√£o e pode n√£o ser ideal para grandes datasets ou edi√ß√µes complexas
        
        # Uma abordagem mais segura para o st.data_editor seria:
        # 1. Carregar o DF original
        # 2. Permitir a edi√ß√£o do DF original no st.data_editor
        # 3. Quando o bot√£o salvar √© clicado, o edited_df cont√©m as altera√ß√µes
        # 4. Iterar sobre as altera√ß√µes e aplicar ao DF original, depois salvar
        
        # Como o st.data_editor n√£o fornece um diff direto, vamos re-carregar e sobrescrever
        # Isso funciona bem para datasets pequenos e onde a integridade dos dados √© mantida
        
        # A maneira mais simples de lidar com o `st.data_editor` √© se voc√™ tiver uma coluna de ID √∫nica.
        # Sem um ID √∫nico, √© dif√≠cil mapear as linhas editadas de volta ao DataFrame original.
        # Para este exemplo, vamos assumir que as edi√ß√µes s√£o feitas no `df_tabela` e que `df_tabela`
        # √© um subconjunto de `df` que pode ser reconstru√≠do.
        
        # Uma solu√ß√£o mais robusta seria:
        # 1. Adicionar uma coluna de ID √∫nica √† sua planilha do Google Sheets (ex: 'ID')
        # 2. Usar essa coluna de ID para identificar as linhas no `st.data_editor`
        # 3. Quando o `edited_df` √© retornado, voc√™ pode comparar com o `df_tabela` original
        #    para encontrar as linhas modificadas e ent√£o atualizar apenas essas linhas no Google Sheets.
        
        # Para manter a simplicidade e focar na integra√ß√£o com o Google Sheets, 
        # vamos sobrescrever a planilha inteira com o `edited_df` (que √© o `df_tabela` editado).
        # Isso significa que os filtros aplicados antes da edi√ß√£o afetar√£o o que √© salvo.
        # Para evitar isso, o ideal √© editar o DataFrame completo e n√£o o filtrado.
        
        # Vamos modificar para que o `st.data_editor` edite o `df` completo, n√£o o `df_filtrado`
        # Isso garante que todas as altera√ß√µes sejam salvas, independentemente dos filtros.
        
        # Para a edi√ß√£o, vamos usar o DataFrame completo, `df`
        # A exibi√ß√£o ainda pode ser filtrada, mas a edi√ß√£o ser√° no conjunto completo de dados.
        
        # Para o prop√≥sito de edi√ß√£o, vamos usar o DataFrame original `df`
        # E depois salvar as altera√ß√µes de volta.
        
        # O `st.data_editor` retorna um DataFrame com as altera√ß√µes. 
        # Para salvar, precisamos aplicar essas altera√ß√µes ao DataFrame original `df`.
        
        # A forma mais simples de fazer isso √© sobrescrever a planilha inteira com o DataFrame editado.
        # Isso pode ser ineficiente para planilhas muito grandes.
        # Uma abordagem mais avan√ßada envolveria identificar as linhas modificadas e atualizar apenas elas.
        
        # Para este exemplo, vamos sobrescrever a planilha com o `edited_df`.
        # Isso significa que o `edited_df` deve conter todas as linhas que voc√™ quer na planilha.
        # Se voc√™ filtrou o `df_tabela` antes de editar, apenas as linhas filtradas ser√£o salvas.
        
        # Para garantir que todas as linhas sejam salvas, vamos editar o `df` original.
        # E depois salvar o `edited_df` (que agora √© o `df` editado).
        
        # Vamos re-carregar os dados para garantir que estamos trabalhando com a vers√£o mais recente
        # antes de aplicar as edi√ß√µes e salvar.
        df_current = load_data_from_gsheets()
        
        # Se o usu√°rio editou a tabela filtrada, precisamos aplicar essas edi√ß√µes ao DataFrame completo.
        # Isso √© um desafio com st.data_editor sem um ID √∫nico.
        # A solu√ß√£o mais simples √© permitir a edi√ß√£o do DataFrame completo e n√£o do filtrado.
        
        # Vamos mudar a l√≥gica para que o st.data_editor sempre edite o DataFrame completo `df`
        # e os filtros sejam apenas para visualiza√ß√£o.
        
        # Para o prop√≥sito de edi√ß√£o, vamos usar o DataFrame original `df`
        # e o `st.data_editor` ir√° operar sobre ele.
        
        # O `edited_df` retornado pelo `st.data_editor` j√° cont√©m as altera√ß√µes.
        # Precisamos garantir que ele tenha a mesma estrutura do `df` original.
        
        # Se voc√™ adicionou ou removeu linhas no `st.data_editor` com `num_rows="dynamic"`,
        # o `edited_df` pode ter um n√∫mero diferente de linhas.
        
        # Para simplificar, vamos assumir que as edi√ß√µes s√£o feitas sobre as linhas existentes
        # e que n√£o h√° adi√ß√£o/remo√ß√£o de linhas complexa.
        
        # A forma mais simples de salvar as altera√ß√µes de volta √© sobrescrever a planilha inteira.
        # Isso √© aceit√°vel para planilhas de tamanho moderado.
        update_data_to_gsheets(edited_df)
        st.experimental_rerun() # Recarrega o dashboard para mostrar os dados atualizados

    # Estat√≠sticas por tipo de monitor
    if 'Tipo de Monitor' in df_filtrado.columns:
        st.markdown("---")
        st.subheader("üîå Tipos de Monitores Encontrados")
        
        df_com_monitor = df_filtrado[df_filtrado['Monitor de Energia (Sim/N√£o)'] == 'Sim']
        if not df_com_monitor.empty:
            tipos_monitor = df_com_monitor['Tipo de Monitor'].value_counts()
            if not tipos_monitor.empty:
                fig_tipos = px.bar(
                    x=tipos_monitor.index,
                    y=tipos_monitor.values,
                    title="Distribui√ß√£o dos Tipos de Monitores",
                    color=tipos_monitor.values,
                    color_continuous_scale='Blues'
                )
                st.plotly_chart(fig_tipos, use_container_width=True)
            else:
                st.info("Nenhum tipo de monitor especificado nos dados.")
        else:
            st.info("Nenhum POP com monitor encontrado nos dados filtrados.")

else:
    st.warning("‚ö†Ô∏è Nenhum dado encontrado. Certifique-se de que a planilha est√° configurada corretamente no Google Sheets e que as credenciais est√£o corretas.")
    st.info("üí° Verifique o nome da planilha e da aba no c√≥digo e as permiss√µes da conta de servi√ßo.")

# Rodap√©
st.markdown("---")
st.markdown("**Dashboard criado para acompanhamento de monitores de energia em POPs**")
st.markdown(f"*√öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}*")
